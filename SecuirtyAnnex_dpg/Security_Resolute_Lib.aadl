package Security_Resolute_Lib
public
	
	with Security_Properties;
	
annex Resolute {**
		
-- String variable definitions for consistency
-- All lower case
	topsecret: string  = "Top Secret"
	secret: string = "Secret"
	confidential: string = "Confidential"
	key: int = 0320

-- Example Claims for Security Clearances
	--
	has_security_clearance (cp:component) <=
	** "component " cp " has a security clearance" **
	has_property(cp, Security_Properties::Security_Clearance)
	--
    has_top_secret_security_clearance (cp: component) <=
    ** " component " cp " has Top Secret security clearance" **
 	property (cp, Security_Properties::Security_Clearance, "No Value") = "Top Secret"
	--
	has_secret_security_clearance (cp: component) <=
    ** " component " cp " has Secret security clearance" **
 	property (cp, Security_Properties::Security_Clearance," No Value") = "Secret"
 	--
 	has_confidential_security_clearance (cp: component) <=
    ** " component " cp " has Confidential security clearance" **
 	property (cp, Security_Properties::Security_Clearance, "No Value") = "Confidential"
 	--
-- Example Claims for information Security Levels
	--
	has_information_security_level (cp:component) <=
	** "component " cp " has an information security level" **
	has_property(cp, Security_Properties::Information_Security_Level) 
	--
	has_top_secret_information_security_level (cp: component) <=
	** " component " cp " has Top Secret security information security Level" **
 	property (cp, Security_Properties::Information_Security_Level, "No Value") = "Top Secret" 
 	--
 	has_secret_information_security_level  (cp: component) <=
    ** " component " cp " has Secret security information security Level" **
 	property (cp, Security_Properties::Information_Security_Level," No Value") = "Secret"
 	--
 	has_confidential_information_security_level (cp: component) <=
    ** " component " cp " has Confidential information security level" **
 	property (cp, Security_Properties::Information_Security_Level, "No Value") = "Confidential"
 	--
 -- Example Claims for contained components
 	--
 	all_subcomponents_have_security (cp: component) <=
 	** "all subcomponents of component " cp " have a value for security level or security clearance" **
	forall(sb: subcomponents(cp)).(has_property (sb, Security_Properties::Information_Security_Level) or
    has_property (sb,Security_Properties::Security_Clearance))
    --
 	all_contained_components_have_security (cp: component) <=
 	** "all contained components of " cp " have security" **
	forall(cn: component).contained(cn, cp) and (has_property (cn, Security_Properties::Information_Security_Level) or
 	has_property (sb,Security_Properties::Security_Clearance))
 
	all_subcomponents_have_equal_or_higher_information_security_level ( cp:component)<=
	**"all subcomponents of " cp " have equal or higher information security level than the information security level of " cp **
	-- only considers "top secret", "secret", and "confidential" levels
	-- only checks direct subcomponents of the instance; does not include subcomponents of subcomponents
	-- requires that all subcomponents have a value for the Security_Properties::Information_Security_Level property 
	(forall(sb0: subcomponents(cp)).has_property(sb0, Security_Properties::Information_Security_Level) and (
	(has_top_secret_Information_Security_Level(cp) and forall (sb1: subcomponents(cp)).has_top_secret_Information_Security_Level(sb1))
	or
	(has_secret_information_security_level(cp) and ((forall(sb2: subcomponents(cp)).(has_secret_information_security_level(sb2) or
		has_top_secret_information_security_level(sb2))))
	or
	(has_confidential_information_security_level(cp) and 
		((forall(sb4: subcomponents(cp)).(has_confidential_information_security_level(sb4) or has_secret_information_security_level(sb4) or
		has_top_secret_information_security_level(sb4))))))))

-- CLAIMS FOR CHECKING ENCRYPTION
	--
    has_encryption (aadl1: component) <=
    ** "AADL element" aadl1 "has encryption" **
    has_property(aadl1, Security_Properties::encryption)
	and
    property (aadl1,Security_Properties::encryption, false) = true
--    
--   has_encryption_scheme (aadl1: aadl) <=
--   ** "AADL element "  aadl1 " has a value for encryption_scheme" **
--   has_property (aadl1,Security_Properties::encryption_scheme)
   -- has_property (aadl1,Security_Properties::encryption_scheme) = true
--	
--	encryption_on_outgoing_connections(src: component) <= 
--	** "encryption for all outgoing connections" ** 
--	forall (conn: connections(src)) .connection_has_encryption(conn) 

--	encryptionForSourceFeature(src: component) <= 
--	** "encryption for all outgoing connections" ** 
--	let one : {feature} = {f for (f:features(src))| name(f) = "outP1"}; 
--	forall (outp: one). 
--	forall (conn: connections(outp)) . connection_has_encryption(conn) 
	
---- need to do this for buses and (rather than?) connections (have encryption on ports and as the protocol for buses)
--	all_connections_have_encryption (cp: component) <=
--	**"all connections to and from component "cp" have a value of true for encryption."**
---- also checks that at least one connection to/from the component has encryption to make this claim
---- false, if there are no connections to the componenet cp
--	exists(cx: connections(cp)).has_encryption(cx) and
--	forall(cn:connections(cp)).has_encryption(cn) and print_connections(cp)
----
---- check that all ports have property encryption or a value for encryption_scheme
--	all_contained_ports_have_encryption (cp: component) <=
--	** " all contained ports in component " cp  " have encryption"**
----	forall( pt: port).contained(pt,cp) and (has_encryption(pt) or has_an_encryption_scheme(pt)) and print_ports(cp)
--	forall( pt: port).contained(pt,cp) and has_encryption(pt) and print_ports(cp)
	
--	all_contained_buses_have_encryption (cp:component) <=
--	** "all buses contained in component " cp " have encryption" **
--	-- the exists claim ensures that there is one bus in cp; 
--	-- without this the claim is true if there are no buses
----	exists(bx: bus).contained(bx,cp) and 
--	((forall( bt: bus).contained(bt,cp)) and (has_encryption(bt) or has_encryption_scheme(bt)))
--
--	all_contained_data_have_encryption (cp:component) <=
--	** "all data components contained in component " cp " have encryption" **
--	-- the exists claim ensures that there is one bus in cp; 
--	-- without this the claim is true if there are no buses
----	exists(dx: data).contained(dx,cp)  and
--	(forall( dt: data).contained(dt,cp) and (has_encryption(dt) or has_encryption_scheme(dt))) 
----
---- check that all features have a value for the property encryption
--   all_contained_features_have_encryption (cp:component) <=
--   	** " all contained features in component " cp  " have encryption"**
--	forall(feat: feature).contained(feat,cp) and has_encryption(pt) and print_features(cp)
----
--sources_have_encryption (cp: component) <=
--** "the sources of all connections within " cp " have encryption" **
--forall(cn: connection).contained(cn,cp) =>
--(source(cn) instanceof feature and has_encryption(cn))
--
-- checks that all connectected features have encryption
	all_connected_features_have_encryption (cp : component) <=
  		** " Check that all features on all connections for " cp "source and destination have encryption" **
  		-- also checks that there is at least one connection that source and destination have encryption
  		(exists(ft: features(cp)).has_property (source(conn), Security_Properties::encryption) and
		has_property (destination(conn), Security_Properties::encryption) => 
		(property(source(conn), Security_Properties::encryption) = property(destination(conn), Security_Properties::encryption)) ) 
		and
		forall (conn : connections (cp)) . has_property (source(conn), Security_Properties::encryption) and
		has_property (destination(conn), Security_Properties::encryption) => 
		(property(source(conn), Security_Properties::encryption) = property(destination(conn), Security_Properties::encryption))
--	
	all_features_of_a_connection_have_same_encryption (cp: component) <=
	**"checks that all features on all connections to or from " cp " have the same encryption scheme" **
	forall(cn: connections(cp)).property(source(cn),  Security_Properties::encryption_scheme) = 
	property(destination(cn),Security_Properties::encryption_scheme) 
 	
 	all_features_of_connections_of_a_component_have_same_encryption (cp: component) <=
 	**"checks that all connections to ports on component " cp " have the same encryption scheme"**
	forall(cn: connections(cp)).property(source(cn),  Security_Properties::encryption_scheme) = 
	property(destination(cn),Security_Properties::encryption_scheme) 
 	 	
-- 	checks_a_field_value_of_encryption_scheme_algorithm (cp: component) <=
-- 	** " check field value of private key for all features of " cp **

--	forall(feat: features(cp)).property_member(property(Security_Properties::encryption_scheme), "private_key") = "03029"	
 	
 
-- 
-- 	 	checks_field_value_of_encryption_scheme_algorithm_on_features (cp: component) <=
-- 	** " check field value of private key for all features of " cp**
-- 	forall(cn: connections(cp)
 	
 	
-- 	
-- 	 	all_features_of_connections_of_a_component_have_same_encryption_scheme (cp: component) <=
-- 	**"checks that all connections to ports on component " cp " have the same encryption scheme"**
--	forall(cn: connections(cp).(source(cn).property_member(property(Security_Properties::encryption_scheme), "private_key")
--		
--		,  Security_Properties::encryption_scheme
--	) = 
--	property(destination(cn),Security_Properties::encryption_scheme) 
 	 	
 	
 	
-- 	all_features_of_connections_have_same_symmetric_key (cp: component) <=
-- 	** "checks that all features on all connections to or from " cp " have the same symmetric (single) key" **
-- 	forall(cn: connections(cp)).property_member(source(cn),  Security_Properties::encryption_scheme) = 
--	property(destination(cn),Security_Properties::encryption_scheme) 
 		
 		-- 	
-- 	-- check encyrption_form properties consistency
-- 	    encryption_port_conn_port (cp1: component) <=
--    ** "AADL element" cp1 "has encryption" **
--    forall( conn:)
--    has_property(aadl1, Security_Properties::encryption)
--	and
--    property (aadl1,Security_Properties::encryption, false) = true
-- 	
**};



end Security_Resolute_Lib;